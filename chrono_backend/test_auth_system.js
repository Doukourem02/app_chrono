// Test du nouveau syst√®me d'authentification adapt√© √† Supabase
// √Ä ex√©cuter apr√®s la migration PostgreSQL

const testSupabaseAuthSystem = async () => {
    const testUser = {
        email: "test.client@example.com",
        phone: "+33123456789",
        role: "client"
    };

    try {
        console.log("üöÄ Test du syst√®me d'authentification Supabase adapt√©");
        console.log("=" .repeat(60));

        // 1. Test envoi OTP avec les nouvelles routes
        console.log("üîÑ Test envoi OTP...");
        const otpResponse = await fetch('http://localhost:3001/api/auth-supabase/send-registration-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(testUser)
        });
        
        const otpResult = await otpResponse.json();
        console.log("üì§ OTP Response:", otpResult);

        if (otpResult.success) {
            console.log("‚úÖ OTP envoy√© avec succ√®s !");
            
            // 2. Instructions pour v√©rifier dans Supabase
            console.log("\nüìä V√©rifications √† faire dans Supabase :");
            console.log("1. SQL Editor ‚Üí Ex√©cutez la migration '003_adapt_to_existing_users.sql'");
            console.log("2. Puis v√©rifiez la table auth.users :");
            console.log("   SELECT id, email, phone, user_role, status FROM auth.users WHERE email = 'test.client@example.com';");
            
            // 3. Simulation v√©rification OTP
            console.log("\nüîê Pour tester la v√©rification OTP :");
            console.log("Remplacez '123456' par le vrai OTP et d√©commentez le code ci-dessous :");
            
            /*
            const verifyResponse = await fetch('http://localhost:3001/api/auth-supabase/verify-registration-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: testUser.email,
                    phone: testUser.phone,
                    otp: "123456", // Remplacez par le vrai OTP
                    role: testUser.role,
                    password: "test123456" // Mot de passe optionnel
                })
            });
            
            const verifyResult = await verifyResponse.json();
            console.log("‚úÖ Verify Response:", verifyResult);
            
            if (verifyResult.success) {
                console.log("\nüéâ Utilisateur cr√©√© avec succ√®s !");
                console.log("üìã Donn√©es utilisateur:", verifyResult.data.user);
                console.log("üë§ Profil cr√©√©:", verifyResult.data.profile);
                
                // 4. Test r√©cup√©ration utilisateur
                const userId = verifyResult.data.user.id;
                const getUserResponse = await fetch(`http://localhost:3001/api/auth-supabase/user/${userId}`);
                const getUserResult = await getUserResponse.json();
                console.log("üë§ R√©cup√©ration utilisateur:", getUserResult);
            }
            */
            
        } else {
            console.log("‚ùå Erreur envoi OTP:", otpResult);
        }
        
    } catch (error) {
        console.error("‚ùå Erreur:", error);
    }
};

// Tests pour diff√©rents r√¥les
const testAllRoles = async () => {
    const roles = ['client', 'driver', 'partner'];
    
    for (const role of roles) {
        console.log(`\nüß™ Test pour le r√¥le: ${role.toUpperCase()}`);
        console.log("-".repeat(40));
        
        const testUser = {
            email: `test.${role}@example.com`,
            phone: `+3312345678${roles.indexOf(role)}`,
            role: role
        };
        
        try {
            const response = await fetch('http://localhost:3001/api/auth-supabase/send-registration-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(testUser)
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log(`‚úÖ ${role}: OTP envoy√© avec succ√®s`);
            } else {
                console.log(`‚ùå ${role}: Erreur -`, result.message);
            }
            
        } catch (error) {
            console.log(`‚ùå ${role}: Erreur r√©seau -`, error.message);
        }
    }
};

console.log(`
üéØ GUIDE D'UTILISATION :

1Ô∏è‚É£ MIGRATION BASE DE DONN√âES :
   - Connectez-vous √† Supabase SQL Editor
   - Ex√©cutez le fichier: migrations/003_adapt_to_existing_users.sql

2Ô∏è‚É£ D√âMARRAGE SERVEUR :
   - cd chrono_backend
   - npm run dev

3Ô∏è‚É£ TESTS :
   - D√©commentez testSupabaseAuthSystem() pour tester
   - Ou d√©commentez testAllRoles() pour tester tous les r√¥les

4Ô∏è‚É£ V√âRIFICATIONS :
   - V√©rifiez que les utilisateurs apparaissent dans auth.users
   - V√©rifiez que les profils sont cr√©√©s dans les tables client_profiles, driver_profiles, partner_profiles

üöÄ Routes disponibles :
   - POST /api/auth-supabase/send-registration-otp
   - POST /api/auth-supabase/verify-registration-otp
   - GET /api/auth-supabase/user/:userId
`);

// D√©commentez pour tester :
// testSupabaseAuthSystem();
// testAllRoles();