import { Vonage } from '@vonage/server-sdk'
import { sendOTPEmail } from './emailService.js'

// Configuration Vonage (variables d'environnement)
const vonage = new Vonage({
  apiKey: process.env.VONAGE_API_KEY,
  apiSecret: process.env.VONAGE_API_SECRET
})

/**
 * G√©n√®re un code OTP al√©atoire
 * @param {number} length - Longueur du code (d√©faut: 6)
 * @returns {string} Code OTP
 */
export function generateOTP(length = 6) {
  const min = Math.pow(10, length - 1)
  const max = Math.pow(10, length) - 1
  return Math.floor(Math.random() * (max - min + 1) + min).toString()
}

/**
 * Envoie un OTP par email via notre service personnalis√©
 * @param {string} email - Adresse email
 * @param {string} phone - Num√©ro de t√©l√©phone (m√©tadonn√©es)
 * @returns {Promise<Object>} R√©sultat de l'envoi
 */
export async function sendEmailOTP(email, phone) {
  try {
    // G√©n√©rer le code OTP
    const otpCode = generateOTP(6)
    
    // Envoyer via notre service email personnalis√©
    const result = await sendOTPEmail(email, otpCode, 'CHRONO')
    
    console.log(`üìß Email OTP personnalis√© envoy√© √†: ${email}`)
    console.log(`üì± T√©l√©phone associ√©: ${phone}`)
    
    return {
      success: true,
      method: 'email',
      otpCode: otpCode, // Retourner le code pour stockage temporaire
      messageId: result.messageId,
      message: 'Code OTP envoy√© par email avec succ√®s'
    }
  } catch (error) {
    console.error('Erreur sendEmailOTP:', error)
    throw error
  }
}

/**
 * Envoie un OTP par SMS via Vonage
 * @param {string} phone - Num√©ro de t√©l√©phone (format international)
 * @param {string} brandName - Nom de l'exp√©diteur (d√©faut: CHRONO)
 * @returns {Promise<Object>} R√©sultat de l'envoi
 */
export async function sendSMSOTP(phone, brandName = 'CHRONO') {
  try {
    if (!process.env.VONAGE_API_KEY || !process.env.VONAGE_API_SECRET) {
      throw new Error('Cl√©s API Vonage non configur√©es')
    }

    // G√©n√©rer le code OTP
    const otpCode = generateOTP(6)
    
    // Message SMS
    const message = `Votre code de v√©rification ${brandName}: ${otpCode}. Ne le partagez avec personne.`

    // Envoyer le SMS
    const response = await vonage.sms.send({
      to: phone,
      from: brandName,
      text: message
    })

    if (response.messages[0].status === '0') {
      console.log(`üì± SMS OTP envoy√© √† ${phone}: ${otpCode}`)
      
      // Retourner le code pour validation (√† stocker temporairement)
      return {
        success: true,
        method: 'sms',
        otpCode: otpCode,
        messageId: response.messages[0]['message-id'],
        message: 'Code OTP envoy√© par SMS avec succ√®s'
      }
    } else {
      throw new Error(`Erreur SMS: ${response.messages[0]['error-text']}`)
    }
  } catch (error) {
    console.error('Erreur sendSMSOTP:', error)
    throw error
  }
}

/**
 * V√©rifie un OTP email personnalis√© (pas Supabase)
 * @param {string} email - Adresse email
 * @param {string} otp - Code OTP
 * @param {string} storedCode - Code stock√© c√¥t√© serveur
 * @returns {Promise<Object>} R√©sultat de la v√©rification
 */
export async function verifyEmailOTP(email, otp, storedCode) {
  try {
    if (otp !== storedCode) {
      throw new Error('Code OTP invalide')
    }

    console.log(`‚úÖ Email OTP v√©rifi√© pour: ${email}`)
    
    // Cr√©er un utilisateur simul√© (sans Supabase Auth pour l'email)
    const user = {
      id: `email_user_${Date.now()}`,
      email: email,
      isVerified: true,
      createdAt: new Date().toISOString(),
      supabaseUser: false
    }

    return {
      success: true,
      user: user,
      session: {
        access_token: `email_token_${user.id}`,
        refresh_token: `email_refresh_${user.id}`,
        expires_in: 3600
      }
    }
  } catch (error) {
    console.error('Erreur verifyEmailOTP:', error)
    throw error
  }
}

/**
 * Fonction principale pour envoyer un OTP (email ou SMS)
 * @param {Object} options - Options d'envoi
 * @param {string} options.email - Adresse email
 * @param {string} options.phone - Num√©ro de t√©l√©phone  
 * @param {string} options.method - M√©thode: 'email' ou 'sms'
 * @param {string} options.brandName - Nom de l'exp√©diteur SMS
 * @returns {Promise<Object>} R√©sultat de l'envoi
 */
export async function sendOTP({ email, phone, method = 'email', brandName = 'CHRONO' }) {
  switch (method) {
    case 'email':
      return await sendEmailOTP(email, phone)
    
    case 'sms':
      return await sendSMSOTP(phone, brandName)
    
    default:
      throw new Error(`M√©thode OTP non support√©e: ${method}`)
  }
}